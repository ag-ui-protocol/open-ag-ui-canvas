"use client"

import { useEffect, useState } from "react"
import { WorkspaceToolbar } from "@/components/workspace-toolbar"
import { ResearcherWorkspace } from "@/components/workspaces/researcher-workspace"
import { PlannerWorkspace } from "@/components/workspaces/planner-workspace"
import { HaikuWorkspace } from "@/components/workspaces/haiku-workspace"
import type { AgentType } from "@/lib/types"
import { AppSidebar } from "@/components/app-sidebar"
import { useAgent } from "@/lib/agent-provider"
import {StockPickerWorkspaceComponent} from "@/components/workspaces/stock-picker-workspace"
import { useCoAgent, useCoAgentStateRender, useCopilotAction } from "@copilotkit/react-core"
// import { Progress } from "@radix-ui/react-progress"
import { Progress } from "@/components/progress"
interface WorkspaceProps {
  selectedAgent: AgentType
  lastMessage: string
}

export interface Haiku {
  japanese: string[];
  english: string[];
  image_names: string[];
  selectedImage: string | null;
}

export function Workspace({ selectedAgent, lastMessage }: WorkspaceProps) {
  const { currentAgent, setAgent } = useAgent()
  const [isAgentActive, setIsAgentActive] = useState(false)
  const [workspaceContent, setWorkspaceContent] = useState<{
    content: string,
    resources: { title: string, url: string, description: string }[]
  }>({
    content: "Start your research here... The agent will help you gather information, analyze findings, and structure your research.",
    resources: []
  })
  const [haikus, setHaikus] = useState<{ japanese: string[], english: string[], image_names: string[], selectedImage: string | null }[]>([])
  const [selectedHaiku, setSelectedHaiku] = useState<Haiku>({
    japanese: ["仮の句よ", "まっさらながら", "花を呼ぶ"],
    english: [
      "A placeholder verse—",
      "even in a blank canvas,",
      "it beckons flowers.",
    ],
    image_names: [],
    selectedImage: null,
  })


  const renderWorkspace = () => {
    switch (currentAgent.id) {
      case "langgraphAgent":
        return (
          <ResearcherWorkspace
            setIsAgentActive={setIsAgentActive}
            sources={workspaceContent.resources}
            // setSources={setWorkspaceContent}
            content={workspaceContent.content}
            setContent={setWorkspaceContent}
            lastMessage={lastMessage}
            isAgentActive={isAgentActive}
          />
        )
      case "crewaiAgent":
        return (
          <PlannerWorkspace
            setIsAgentActive={setIsAgentActive}
            content={workspaceContent.content}
            setContent={(content: string) => setWorkspaceContent({ ...workspaceContent, content })  }
            lastMessage={lastMessage}
            isAgentActive={isAgentActive}
          />
        )
      case "haikuAgent":
        return (
          <HaikuWorkspace
            isAgentActive={isAgentActive}
            setIsAgentActive={setIsAgentActive}
            haikus={haikus}
            setHaikus={setHaikus}
            selectedHaiku={selectedHaiku}
            setSelectedHaiku={setSelectedHaiku}
          />
        )
      case "agnoAgent":
        return (
          <StockPickerWorkspaceComponent
            isAgentActive = {isAgentActive}
            setIsAgentActive={setIsAgentActive}
          />
        )
    }
  }

  useCopilotAction({
    name: "render_haiku",
    description: "Render a haiku generated by the agent",
    parameters: [
      {
        name: "haiku",
        type: "object",
        description: "The topic of the haiku",
        attributes: [
          {
            name: "japanese",
            type: "string[]",
            description: "The japanese of the haiku"
          },
          {
            name: "english",
            type: "string[]",
            description: "The english of the haiku"
          },
          {
            name: "image_names",
            type: "string[]",
            description: "The image names of the haiku"
          },

        ]
      }
    ],
    renderAndWaitForResponse: ({ args, respond, status }) => {
      useEffect(() => {
        console.log(args, "args");
      }, [args])
      return (
        (() => {
          const [approvalStatus, setApprovalStatus] = useState<null | 'approved' | 'rejected'>(null);
          // useEffect(() => { setApprovalStatus(null); }, [args]);
          return (
            <div className="suggestion-card text-left rounded-md p-4 mt-4 flex flex-col bg-gray-100">
              <div className="border-b border-gray-300 pb-4">
                {args?.haiku?.japanese?.map((line, index) => (
                  <div className="flex items-center gap-3 mb-2" key={index}>
                    <p className="text-lg font-bold">{(() => {
                      const firstLine = args?.haiku?.japanese?.[0];
                      const haikuIndex = haikus.findIndex((h: any) => h.japanese[0] === firstLine);
                      const haiku = haikus[haikuIndex];
                      return (
                        haiku?.japanese?.[index] || args?.haiku?.japanese?.[index]
                      )
                    })()}</p>
                    <p className="text-sm font-light">
                      {(() => {
                        const firstLine = args?.haiku?.japanese?.[0];
                        const haikuIndex = haikus.findIndex((h: any) => h.japanese[0] === firstLine);
                        const haiku = haikus[haikuIndex];
                        return (
                          haiku?.english?.[index] || args?.haiku?.english?.[index]
                        )
                      })()}
                    </p>
                  </div>
                ))}
                {args?.haiku?.japanese && args?.haiku?.japanese.length >= 2 && (
                  <div style={{ height: "5.5rem" }} className="mt-3 gap-2 justify-between w-full suggestion-image-container">
                    {(() => {
                      const firstLine = args?.haiku?.japanese?.[0];
                      if (!firstLine) return null;
                      const haikuIndex = haikus.findIndex((h: any) => h.japanese[0] === firstLine);
                      const haiku = haikus[haikuIndex];
                      return args?.haiku?.image_names?.map((imageName, imgIndex) => (
                        <img
                          key={args?.haiku?.image_names?.length + "_" + imageName}
                          src={`/images/${imageName}`}
                          alt={imageName}
                          tabIndex={0}
                          style={{
                            width: "5rem",
                            height: "5rem",
                          }}
                          className={haiku?.selectedImage === imageName ? `suggestion-card-image-focus` : `haiku-card-image`}
                        />
                      ));
                    })()}
                  </div>
                )}
                {(approvalStatus === null  && status === "executing") && (
                  <div className="flex gap-3">
                    <button
                      className="bg-rose-500 hover:bg-rose-600 text-white px-3 py-1.5 rounded w-20 text-sm font-semibold transition-colors duration-150"
                      onClick={() => {
                        setApprovalStatus('rejected');
                        if (respond) {
                          respond("Haiku Rejected");
                        }
                      }}
                    >
                      Reject
                    </button>
                    <button
                      className="bg-emerald-500 hover:bg-emerald-600 text-white px-3 py-1.5 rounded w-20 text-sm font-semibold transition-colors duration-150"
                      onClick={() => {
                        setApprovalStatus('approved');
                        if (respond) {
                          respond("Haiku Approved");
                          setSelectedHaiku({ ...args?.haiku, selectedImage: args?.haiku?.image_names[0] });
                          setHaikus([...haikus, { ...args?.haiku, selectedImage: args?.haiku?.image_names[0] }]);
                        }
                      }}
                    >
                      Approve
                    </button>
                  </div>
                )}
              </div>
            </div>
          );
        })()
      )
    }
  })

  

  return (
    <main className="flex flex-1 h-screen flex-col overflow-hidden">
      <WorkspaceToolbar
        selectedAgent={selectedAgent}
        isAgentActive={isAgentActive}
        setIsAgentActive={setIsAgentActive}
      />
      <div className="flex-1 h-screen overflow-auto p-2">
        <div className="flex h-full gap-6">
          {/* Chat UI Sidebar Placeholder */}
          <div className="w-96 min-w-[22rem] max-w-sm bg-white flex flex-col justify-between">
            {/* <div className="p-4 text-gray-400 text-center">Chat UI Placeholder</div> */}
            <AppSidebar
              setIsAgentActive={setIsAgentActive}
              messages={[]}
              addMessage={() => { }}
              selectedAgent={selectedAgent}
              setSelectedAgent={() => { }}
            />
          </div>
          {/* Main Workspace */}
          <div className="flex-1 mt-4 mb-4">
            <div className="h-full">{renderWorkspace()}</div>
          </div>
        </div>
      </div>
    </main>
  )
}
